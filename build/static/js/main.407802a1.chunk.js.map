{"version":3,"sources":["components/GalleryItem/GalleryItem.jsx","components/GalleryList/GalleryList.jsx","components/App/App.js","registerServiceWorker.js","index.js"],"names":["GalleryItem","state","pictureShowing","clickPicture","console","log","_this","setState","flipPicture","react_default","a","createElement","className","key","props","picture","id","onClick","src","path","alt","upVotePicture","likes","description","Fragment","this","Component","GalleryList","pictureGallery","listOfPictures","map","components_GalleryItem_GalleryItem","App","newPicture","title","addNewPhoto","Axios","put","concat","then","response","getPictures","catch","error","handleChangeFor","propertyName","event","Object","objectSpread","defineProperty","target","value","_this2","get","table","data","type","placeholder","onChange","components_GalleryList_GalleryList","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","ReactDOM","render","components_App_App","document","getElementById","URL","process","origin","addEventListener","fetch","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.407802a1.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass GalleryItem extends Component {\n  state = {\n    pictureShowing: true\n  };\n\n  clickPicture = () => {\n    console.log(\"picture clicked\");\n    this.setState({\n      pictureShowing: !this.state.pictureShowing\n    });\n  };\n\n  flipPicture = () => {\n    if (this.state.pictureShowing === true) {\n      return (\n        <div className='displayedContent'>\n          <div className='pictureDiv' key={this.props.picture.id}>\n            <img\n              onClick={this.clickPicture}\n              src={this.props.picture.path}\n              alt=''\n              className='pictureBox'\n              key={this.props.picture.id}\n            />\n            <button\n              className='voteButton'\n              onClick={() => this.props.upVotePicture(this.props.picture.id)}>\n              Liked {this.props.picture.likes} Times\n            </button>\n          </div>\n        </div>\n      );\n    } else {\n      return (\n        <div className='displayedContent'>\n          <div className='descriptionDiv' onClick={this.clickPicture}>\n            <p className='textBox'>{this.props.picture.description}</p>\n          </div>\n        </div>\n      );\n    }\n  };\n\n  render() {\n    return <>{this.flipPicture()}</>;\n  }\n}\n\nexport default GalleryItem;\n","import React, { Component } from \"react\";\nimport GalleryItem from \"../GalleryItem/GalleryItem\";\n\nclass GalleryList extends Component {\n  render() {\n    let pictureGallery = this.props.listOfPictures.map(picture => {\n      return <GalleryItem picture={picture} upVotePicture={this.props.upVotePicture}/>;\n      //code to use in GalleryItem component\n      // <img src={picture.path} alt='' className='pictureBox'></img>\n    });\n\n    return <>{pictureGallery}</>;\n  }\n}\n\nexport default GalleryList;\n","import React, { Component } from \"react\";\n// import \"./bootstrap.css\";\nimport \"./App.css\";\nimport Axios from \"axios\";\nimport GalleryList from \"../GalleryList/GalleryList\";\n\nclass App extends Component {\n  state = {\n    listOfPictures: [],\n    newPicture: {\n      path: '',\n      description: '',\n      title: '',\n    }\n  };\n\n  //checking if document is loaded\n  componentDidMount() {\n    this.getPictures();\n    console.log(\"app mounted successfully\");\n  }\n\n  //GET function\n  getPictures() {\n    Axios.get(\"/gallery\")\n      .then(response => {\n        console.table(response.data);\n        //set array with data from server\n        this.setState({\n          listOfPictures: response.data\n        });\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  }\n  //end of GET function\n\n\n//POST function\naddNewPhoto = () => {}\n\n\n\n\n  //PUT function\n  upVotePicture = id => {\n    Axios.put(`/gallery/like/${id}`)\n      .then(response => {\n        console.log(response);\n        //refreshes gallery after every like\n        this.getPictures();\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  };\n  //end of PUT function\n\n\n//One function to handle them all\nhandleChangeFor = (propertyName) => (event) => {\n  this.setState({\n    newPicture: {\n      ...this.state.newPicture,\n    [propertyName]: event.target.value,\n  }\n  \n  })\n}\n\n\n  //render DOM\n  render() {\n    return (\n      <div className='App'>\n        <header className='App-header'>\n          <h1 className='App-title'>Gallery of my life</h1>\n        </header>\n        <div>\n          <form>\n            <label>\n              <input\n                type='text'\n                placeholder='url'\n                value={this.state.newPicture.path}\n                onChange={this.handleChangeFor('path')}\n              />\n            </label>\n          </form>\n        </div>\n        <div className='galleryListContainer'>\n          {/* calls GalleryList to render on DOM*/}\n          <GalleryList\n            listOfPictures={this.state.listOfPictures}\n            upVotePicture={this.upVotePicture}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}