{"version":3,"sources":["components/GalleryItem/GalleryItem.jsx","components/GalleryList/GalleryList.jsx","components/AddPhotoForm/AddPhotoForm.jsx","components/App/App.js","registerServiceWorker.js","index.js"],"names":["GalleryItem","state","pictureShowing","clickPicture","console","log","_this","setState","flipPicture","react_default","a","createElement","className","key","props","picture","id","onClick","src","path","alt","upVotePicture","likes","deletePhoto","description","Fragment","this","Component","GalleryList","pictureGallery","listOfPictures","map","components_GalleryItem_GalleryItem","AddPhotoForm","type","placeholder","value","newPicture","onChange","handleChangeFor","addNewPhoto","App","title","Axios","post","then","response","getPictures","catch","error","delete","concat","put","propertyName","event","Object","objectSpread","defineProperty","target","_this2","get","table","data","components_AddPhotoForm_AddPhotoForm","components_GalleryList_GalleryList","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","ReactDOM","render","components_App_App","document","getElementById","URL","process","origin","addEventListener","fetch","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.3436f167.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass GalleryItem extends Component {\n  state = {\n    pictureShowing: true\n  };\n\n  clickPicture = () => {\n    console.log(\"picture clicked\");\n    this.setState({\n      pictureShowing: !this.state.pictureShowing\n    });\n  };\n\n  flipPicture = () => {\n    //sets up conditional rendering of picture or description\n    if (this.state.pictureShowing === true) {\n      return (\n        <div className='displayedContent'>\n          <div className='pictureDiv' key={this.props.picture.id}>\n            <img\n              onClick={this.clickPicture}\n              src={this.props.picture.path}\n              alt=''\n              className='pictureBox'\n              key={this.props.picture.id}\n            />\n            <button\n              className='voteButton'\n              onClick={() => this.props.upVotePicture(this.props.picture.id)}>\n              Liked {this.props.picture.likes} Times\n            </button>\n            <button \n            className='deleteButton' \n            onClick={() => this.props.deletePhoto(this.props.picture.id)}>\n              DELETE THIS ONE\n            </button>\n          </div>\n        </div>\n      );\n    } else {\n      return (\n        <div className='displayedContent'>\n          <div className='descriptionDiv' onClick={this.clickPicture}>\n            <p className='textBox'>{this.props.picture.description}</p>\n          </div>\n        </div>\n      );\n    }\n  };\n\n  render() {\n    return <>{this.flipPicture()}</>;\n  }\n}\n\nexport default GalleryItem;\n","import React, { Component } from \"react\";\nimport GalleryItem from \"../GalleryItem/GalleryItem\";\n\nclass GalleryList extends Component {\n  render() {\n    let pictureGallery = this.props.listOfPictures.map(picture => {\n      return <GalleryItem picture={picture} upVotePicture={this.props.upVotePicture} deletePhoto={this.props.deletePhoto}/>;\n      //code to use in GalleryItem component\n      // <img src={picture.path} alt='' className='pictureBox'></img>\n    });\n\n    return <>{pictureGallery}</>;\n  }\n}\n\nexport default GalleryList;\n","import React, {Component} from 'react'\n\nclass AddPhotoForm extends Component {\n    render() {\n        return (\n          <form>\n            <label>\n              <input\n                type='text'\n                placeholder='url'\n                value={this.props.newPicture.path}\n                onChange={this.props.handleChangeFor(\"path\")}\n              />\n            </label>\n            <button onClick={this.props.addNewPhoto}>Add New Image!</button>\n          </form>\n        );\n    }\n}\n\nexport default AddPhotoForm;","import React, { Component } from \"react\";\n// import \"./bootstrap.css\";\nimport \"./App.css\";\nimport Axios from \"axios\";\nimport GalleryList from \"../GalleryList/GalleryList\";\nimport AddPhotoForm from \"../AddPhotoForm/AddPhotoForm\";\n\nclass App extends Component {\n  state = {\n    listOfPictures: [],\n    newPicture: {\n      path: \"\",\n      description: \"\",\n      title: \"\"\n    }\n  };\n\n  //checking if document is loaded\n  componentDidMount() {\n    this.getPictures();\n    console.log(\"app mounted successfully\");\n  }\n\n  //GET function\n  getPictures() {\n    Axios.get(\"/gallery\")\n      .then(response => {\n        console.table(response.data);\n        //set array with data from server\n        this.setState({\n          listOfPictures: response.data\n        });\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  }\n  //end of GET function\n\n  //POST function\n  addNewPhoto = () => {\n    Axios.post(\"/gallery\", this.state.newPicture)\n      .then(response => {\n        console.log(this.state.newPicture);\n        console.log(response);\n        this.getPictures();\n      })\n      .catch(error => {\n        console.log(\"There was an error on the client side POST\", error);\n      });\n  };\n\n  //end of POST function\n\n  deletePhoto = id => {\n    Axios.delete(`/gallery/delete/${id}`)\n      .then(response => {\n        console.log(response);\n        this.getPictures();\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  };\n\n  //PUT function\n  upVotePicture = id => {\n    Axios.put(`/gallery/like/${id}`)\n      .then(response => {\n        console.log(response);\n        //refreshes gallery after every like\n        this.getPictures();\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  };\n  //end of PUT function\n\n  //One function to handle them all\n  handleChangeFor = propertyName => event => {\n    this.setState({\n      newPicture: {\n        ...this.state.newPicture,\n        [propertyName]: event.target.value\n      }\n    });\n  };\n\n  //render DOM\n  render() {\n    return (\n      <div className='App'>\n        <header className='App-header'>\n          <h1 className='App-title'>Gallery of my life</h1>\n        </header>\n        <div>\n          {/* calls AddPhotoForm to render on DOM */}\n          <AddPhotoForm\n            newPicture={this.state.newPicture}\n            handleChangeFor={this.handleChangeFor}\n            addNewPhoto={this.addNewPhoto}\n          />\n        </div>\n        <div className='galleryListContainer'>\n          {/* calls GalleryList to render on DOM*/}\n          <GalleryList\n            listOfPictures={this.state.listOfPictures}\n            upVotePicture={this.upVotePicture}\n            deletePhoto={this.deletePhoto}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}