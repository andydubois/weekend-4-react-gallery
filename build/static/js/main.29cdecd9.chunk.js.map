{"version":3,"sources":["components/GalleryList/GalleryList.jsx","components/App/App.js","registerServiceWorker.js","index.js"],"names":["GalleryList","listOfPictures","this","props","map","picture","react_default","a","createElement","src","Component","App","state","getPictures","console","log","_this2","Axios","get","then","response","data","setState","catch","error","className","components_GalleryList_GalleryList","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","ReactDOM","render","components_App_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"uRAiBeA,mLAPP,MACI,CAACC,eALgBC,KAAKC,MAAMF,eAAeG,IAAI,SAAAC,GAC/C,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,IAAI,6BAJFC,aC0CXC,6MAvCbC,MAAQ,CACNX,eAAgB,uFAKhBC,KAAKW,cACLC,QAAQC,IAAI,kEAGA,IAAAC,EAAAd,KACZe,IAAMC,IAAI,YACPC,KAAK,SAAAC,GACJN,QAAQC,IAAIK,EAASC,MACrBL,EAAKM,SAAS,CACZrB,eAAgBmB,EAASC,SAG5BE,MAAM,SAAAC,GACLV,QAAQC,IAAIS,sCAOhB,OACElB,EAAAC,EAAAC,cAAA,OAAKiB,UAAU,OACbnB,EAAAC,EAAAC,cAAA,UAAQiB,UAAU,cAChBnB,EAAAC,EAAAC,cAAA,MAAIiB,UAAU,aAAd,uBAEFnB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACkB,EAAD,CAAazB,eAAgBC,KAAKU,MAAMX,iBACxCK,EAAAC,EAAAC,cAAA,OAAKC,IAAI,mCAlCCC,aCKZiB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTf,KAAK,SAAAmB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB5B,QACfuB,UAAUC,cAAcO,WAK1B7B,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBQ,MAAM,SAAAC,GACLV,QAAQU,MAAM,4CAA6CA,KCzEjEoB,IAASC,OAAOvC,EAAAC,EAAAC,cAACsC,EAAD,MAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBb,UAAW,CAGzE,GADkB,IAAIc,IAAIC,GAAwBrB,OAAOC,UAC3CqB,SAAWtB,OAAOC,SAASqB,OAIvC,OAGFtB,OAAOuB,iBAAiB,OAAQ,WAC9B,IAAMlB,EAAK,GAAAmB,OAAMH,GAAN,sBAEPvB,GAiDV,SAAiCO,GAE/BoB,MAAMpB,GACHf,KAAK,SAAAC,GAGkB,MAApBA,EAASmC,SACuD,IAAhEnC,EAASoC,QAAQtC,IAAI,gBAAgBuC,QAAQ,cAG7CtB,UAAUC,cAAcsB,MAAMvC,KAAK,SAAAmB,GACjCA,EAAaqB,aAAaxC,KAAK,WAC7BU,OAAOC,SAAS8B,aAKpB3B,EAAgBC,KAGnBX,MAAM,WACLT,QAAQC,IACN,mEArEA8C,CAAwB3B,GAIxBC,UAAUC,cAAcsB,MAAMvC,KAAK,WACjCL,QAAQC,IACN,+GAMJkB,EAAgBC,MCzCxB4B","file":"static/js/main.29cdecd9.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\n\nclass GalleryList extends Component {\n    render() {\n\n        let listOfPictures = this.props.listOfPictures.map(picture => {\n            return <img src=\"{picture.path}\"></img>\n        })\n\n        return(\n            {listOfPictures}\n        )\n    }\n}\n\n\nexport default GalleryList;","import React, { Component } from 'react';\nimport './App.css';\nimport Axios from 'axios';\nimport GalleryList from '../GalleryList/GalleryList'\n\nclass App extends Component {\n  state = {\n    listOfPictures: []\n  };\n\n  //checking if document is loaded\n  componentDidMount() {\n    this.getPictures();\n    console.log(\"app mounted successfully\");\n  }\n\n  getPictures() {\n    Axios.get(\"/gallery\")\n      .then(response => {\n        console.log(response.data);\n        this.setState({\n          listOfPictures: response.data\n        });\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  }\n\n  render() {\n\n\n    return (\n      <div className='App'>\n        <header className='App-header'>\n          <h1 className='App-title'>Gallery of my life</h1>\n        </header>\n        <br />\n        <GalleryList listOfPictures={this.state.listOfPictures}/>\n        <img src='images/groupVanPic.jpg' />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}